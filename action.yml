name: Repo SemVer
description: Find the greatest semantic version Git tag and return it, along with ("major", "minor", "patch", etc.) increments.
author: Marten Lohstroh <marten@berkeley.edu>
inputs:
  path:
    type: string
    description: Path to the repository
    default: ${{ github.workspace }}
  repo:
    type: string
    description: Name of repository to check out
    required: false
  bump:
    type: string
    description: Requested version increment in bump output
    required: false
  planned:
    type: string
    description: Version to compare against current
    required: false
  prerelease:
    type: string
    description: String to be used in the next-prerelease output
    required: false
  build:
    type: string
    description: String to be used in next-build output
    required: false

outputs:
  tag:
    description: Tag corresponding to current version
    value: ${{ steps.find.outputs.tag }}    
  current:
    description: Current version
    value: ${{ steps.cur.outputs.ver }}
  bump:
    description: Requested version bump
    value: ${{ steps.bump.outputs.ver }}
  prefix:
    description: Prefix used in the tag
    value: ${{ steps.prefix.output.str }}
  next-prerelease:
    description: Prerelease increment (over current semver tag)
    value: ${{ steps.incr.outputs.prerelease }}  
  next-patch:
    description: Patch increment (over current semver tag)
    value: ${{ steps.incr.outputs.patch }}
  next-minor:
    description: Minor increment (over current semver tag)
    value: ${{ steps.incr.outputs.minor }}
  next-major:
    description: Major increment (over current semver tag)
    value: ${{ steps.incr.outputs.major }}
  next-release:
    description: Release increment (over current semver tag)
    value: ${{ steps.incr.outputs.release }}
  next-build:
    description: Release increment (over current semver tag)
    value: ${{ steps.build.outputs.incr }}  
  planned-is-valid:
    description: True if planned input is valid semver greater than current
    value: ${{ steps.test.outputs.greater }}

branding:
  icon: tag
  color: green
runs:
  using: composite
  steps:
    - name: Check out repository if one is specified
      uses: actions/checkout@v3
      with:
        repository: ${{ inputs.repo }}
        path: ${{ inputs.path }}
      if: ${{ inputs.repo != '' }}
    - name: Install semver-tool
      run: |
        wget -O /usr/local/bin/semver https://raw.githubusercontent.com/fsaintjacques/semver-tool/master/src/semver
        chmod +x /usr/local/bin/semver
      shell: bash
    - name: Install greatest-semver-tag
      run: |
        wget -O /usr/local/bin/greatest-semver-tag https://raw.githubusercontent.com/lhstrh/greatest-semver-tag/main/greatest-semver-tag.sh
        chmod +x /usr/local/bin/greatest-semver-tag
      shell: bash
    - name: Fetch all tags
      run: git fetch --all --tags
      working-directory: ${{ inputs.path }}
      shell: bash
    - name: Find the greatest semver tag
      id: find
      working-directory: ${{ inputs.path }}
      run: >
        tag="$(greatest-semver-tag)";
        if [[ tag = "0.0.0" ]]; then
          echo "::set-output name=tag::$(greatest-semver-tag)"
        else
          echo "::set-output name=tag::$(greatest-semver-tag)"
        fi
      shell: bash
    - name: Set current version based on stripped tag
      id: cur
      run: |
        echo "::set-output name=ver::$(echo "${{ steps.find.outputs.tag }}" | sed 's/^[^0-9]*//')"
      shell: bash
    - name: Determine the prefix and set it
      id: prefix
      run: >
        tag="${{ steps.find.outputs.tag }}";
        ver="${{ steps.cur.outputs.ver }}";
        echo "::set-output name=str::$(echo ${tag%"$ver"})"
      shell: bash
    - name: Test if planned input is greater than current
      id: test
      run: >
        if [[ $(semver compare ${{ inputs.planned }} ${{ steps.find.outputs.ver }}) -eq 1 ]]; then
          echo "::set-output name=greater::true"
        else
          echo "::set-output name=greater::false"
        fi
      shell: bash
      if: ${{ inputs.planned != '' }}
    - name: Produce increments
      id: incr
      run: |
        echo "::set-output name=patch::$(semver bump patch ${{ steps.find.outputs.tag }})"
        echo "::set-output name=minor::$(semver bump minor ${{ steps.find.outputs.tag }})"
        echo "::set-output name=major::$(semver bump major ${{ steps.find.outputs.tag }})"
        echo "::set-output name=prerelease::$(semver bump prerel ${{ inputs.prerelease }} ${{ steps.find.outputs.tag }})"
        echo "::set-output name=release::$(semver bump release ${{ steps.find.outputs.tag }})"
      shell: bash
    - name: Produce build increment if a build string was given
      id: build
      run: |
        echo "::set-output name=incr::$(semver bump build ${{ inputs.build }} ${{ steps.find.outputs.tag }})"
      shell: bash    
      if: ${{ inputs.build != '' }}
    - name: Produce version bump (if requested)
      id: bump
      run: >
        if [[ "${{ inputs.bump }}" = "patch" ]]; then
          echo "::set-output name=ver::${{ steps.incr.outputs.patch }}"
        elif [[ "${{ inputs.bump }}" = "minor" ]]; then
          echo "::set-output name=ver::${{ steps.incr.outputs.minor }}"
        elif [[ "${{ inputs.bump }}" = "major" ]]; then
          echo "::set-output name=ver::${{ steps.incr.outputs.major }}"
        elif [[ "${{ inputs.bump }}" = "release" ]]; then
          echo "::set-output name=ver::${{ steps.incr.outputs.release }}"
        elif [[ "${{ inputs.bump }}" = "prerelease" ]]; then
          echo "::set-output name=ver::${{ steps.incr.outputs.prerelease }}"
        elif [[ "${{ inputs.bump }}" = "build" ]]; then
          if [[ "${{ inputs.build }}" != "" ]]; then
            echo "::set-output name=ver::${{ steps.incr.outputs.next-build }}"
          else
            echo "The build input must be set when requesting build bump";  
          fi
        else
          echo "::error::Invalid version bump: ${{ inputs.bump }} (options: major|minor|patch|release|prerelease|build)";
          exit 1
        fi
      if: ${{ inputs.bump != '' }}
      shell: bash
    - name: Print results
      run: |
        echo "Greatest tag: ${{ steps.find.outputs.tag }}"
        echo "Used prefix: ${{ steps.prefix.outputs.str }}"
        echo "Current version: ${{ steps.cur.outputs.ver }}"
        echo "Version bump (if requested): ${{ steps.bump.outputs.ver }}"
        echo "Prerelease increment: ${{ steps.incr.outputs.prerelease }}"
        echo "Patch increment: ${{ steps.incr.outputs.patch }}"
        echo "Minor increment: ${{ steps.incr.outputs.minor }}"
        echo "Major increment: ${{ steps.incr.outputs.major }}"
        echo "Release increment: ${{ steps.incr.outputs.release }}"
        echo "Build increment (if specified): ${{ steps.build.outputs.incr }}"
      shell: bash
